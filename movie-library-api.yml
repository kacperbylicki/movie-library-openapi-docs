openapi: 3.0.1
info:
  title: movie-library
  version: '1.0'
paths:
  # Authentication Endpoints
  /api/Login:
    post:
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
          text/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
            application/*+json:
              schema:
                $ref: '#/components/schemas/Tokens'
            text/json:
              schema:
                $ref: '#/components/schemas/Tokens'
  
  /api/Register:
    post:
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
          text/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
      responses:
        '201':
          description: Success
  
  /api/RefreshToken:
    post:
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenDto'
          text/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RefreshTokenDto'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
            application/*+json:
              schema:
                $ref: '#/components/schemas/Tokens'
            text/json:
              schema:
                $ref: '#/components/schemas/Tokens'
  
  # Movies Endpoints
  /api/Movies:
    get:
      tags:
        - Movies
      parameters:
        - name: title
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/*+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
    post:
      tags:
        - Movies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMovieDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateMovieDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateMovieDto'
      responses:
        '200':
          description: Success
          
  /api/Movies/{id}:
    get:
      tags:
        - Movies
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/*+json:
              schema:
                $ref: '#/components/schemas/Movie'
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
            text/json:
              schema:
                $ref: '#/components/schemas/Movie'
    patch:
      tags:
        - Movies
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMovieDto'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateMovieDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateMovieDto'
      responses:
        '200':
          description: Success
    delete:
      tags:
        - Movies
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          
  # Comments Endpoints
  /api/Comments:
    get:
      tags:
        - Comments
      parameters:
        - name: movieId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/*+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      tags:
        - Comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateCommentDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateCommentDto'
      responses:
        '200':
          description: Success
  
  /api/Comments/{id}:
    patch:
      tags:
        - Comments
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentDto'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateCommentDto'
      responses:
        '200':
          description: Success
    delete:
      tags:
        - Comments
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          
  # Rating Endpoints
  /api/Ratings:
    get:
      tags:
        - Ratings
      parameters:
        - name: movieId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/*+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rating'
    post:
      tags:
        - Ratings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRatingDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateRatingDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateRatingDto'
      responses:
        '200':
          description: Success
  
  /api/Ratings/{id}:
    patch:
      tags:
        - Ratings
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRatingDto'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateRatingDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateRatingDto'
      responses:
        '200':
          description: Success
    delete:
      tags:
        - Ratings
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          
components:
  schemas:
    # Shared
    UUID:
      type: string
      format: uuid
      nullable: true
    CreatedAt:
      type: string
      format: date-time
    UpdatedAt:
      type: string
      format: date-time
    
    # Movies
    Movie:
      required:
        - directors
        - genre
        - producers
        - releaseYear
        - roles
        - title
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
        updatedAt:
          $ref: '#/components/schemas/UpdatedAt'
        title:
          type: string
        genre:
          type: array
          items:
            type: string
        producers:
          type: array
          items:
            type: string
        directors:
          type: array
          items:
            type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        ratings:
          type: array
          items:
            $ref: '#/components/schemas/Rating'
          nullable: true
        releaseYear:
          maximum: 2022
          minimum: 1900
          type: integer
          format: int32
      additionalProperties: false
    
    Role:
      required:
        - actor
        - character
      type: object
      properties:
        actor:
          type: string
        character:
          type: string
      additionalProperties: false
    
    CreateMovieDto:
      required:
        - directors
        - genre
        - producers
        - releaseYear
        - roles
        - title
      type: object
      properties:
        title:
          minLength: 3
          type: string
        genre:
          minItems: 1
          type: array
          items:
            type: string
        producers:
          minItems: 1
          type: array
          items:
            type: string
        directors:
          minItems: 1
          type: array
          items:
            type: string
        roles:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Role'
        releaseYear:
          maximum: 2022
          minimum: 1900
          type: integer
          format: int32
      additionalProperties: false
    
    UpdateMovieDto:
      type: object
      properties:
        title:
          minLength: 3
          type: string
          nullable: true
        genre:
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        producers:
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        directors:
          minItems: 1
          type: array
          items:
            type: string
          nullable: true
        roles:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Role'
          nullable: true
        releaseYear:
          maximum: 2022
          minimum: 1900
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    
    # Authentication
    Email:
      type: string
      format: email
    
    Password:
      minLength: 8
      type: string
      example: "32UHfMuzv7t0$SJ98uhntKbh"
    
    Username:
      minLength: 2
      type: string
      example: "NoobMaster69"
    
    AccessToken:
      type: string
      format: jwt
    
    RefreshToken:
      type: string
      format: jwt
    
    Tokens:
      required:
        - accessToken
        - refreshToken
      type: object
      properties:
        accessToken:
          $ref: '#/components/schemas/AccessToken'
        refreshToken:
          $ref: '#/components/schemas/RefreshToken'
    
    LoginDto:
      required:
        - email
        - password
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          $ref: '#/components/schemas/Password'
      additionalProperties: false
    
    RegisterDto:
      required:
        - email
        - username
        - password
        - passwordConfirmation
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        username:
          $ref: '#/components/schemas/Username'
        password:
          $ref: '#/components/schemas/Password'
        passwordConfirmation:
          $ref: '#/components/schemas/Password'
    
    RefreshTokenDto:
      type: object
      properties:
        refreshToken:
          $ref: '#/components/schemas/RefreshToken'
          
    # Comments
    CommentContent:
      type: string
      minLength: 2
      example: "Great movie"
      
    Comment:
      required:
        - uuid
        - author
        - content
        - createdAt
        - updatedAt
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
        authorUsername:
          $ref: '#/components/schemas/Username'
        content:
          $ref: '#/components/schemas/CommentContent'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
        updatedAt:
          $ref: '#/components/schemas/UpdatedAt'
          
    UpdateCommentDto:
      required:
        - content
      type: object
      properties:
        content:
          $ref: '#/components/schemas/CommentContent'
      additionalProperties: false
      
    CreateCommentDto:
      required:
        - movieId
        - author
        - content
      type: object
      properties:
        movieId:
          $ref: '#/components/schemas/UUID'
        authorUsername:
          $ref: '#/components/schemas/Username'
        content:
          $ref: '#/components/schemas/CommentContent'
      additionalProperties: false
      
    # Ratings
    Rate:
      minimum: 0
      maximum: 5
      type: number
      format: int
      
    Rating:
      required:
        - uuid
        - rate
        - createdAt
        - updatedAt
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/UUID'
        rate:
          $ref: '#/components/schemas/Rate'
        createdAt:
          $ref: '#/components/schemas/CreatedAt'
        updatedAt:
          $ref: '#/components/schemas/UpdatedAt'
      additionalProperties: false
      
    CreateRatingDto:
      required:
        - movieId
        - rate
      type: object
      properties:
        movieId:
          $ref: '#/components/schemas/UUID'
        rate:
          $ref: '#/components/schemas/Rate'
      additionalProperties: false
      
    UpdateRatingDto:
      required:
        - rate
      type: object
      properties:
        rate:
          $ref: '#/components/schemas/Rate'
      additionalProperties: false
